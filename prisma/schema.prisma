// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- USERS ----------
model User {
  userId       Int       @id @default(autoincrement())
  username     String    @unique
  passwordHash String    @map("password_hash")
  fullName     String?   @map("full_name")
  role         String    @default("operator")
  createdAt    DateTime  @default(now()) @map("created_at")

  // Relations
  scans        Scan[]
  detections   ProductDetection[]

  @@map("users")
}

// ---------- PRODUCTS ----------
model Product {
  productId          Int       @id @default(autoincrement())
  name               String
  visualDescription  String?   @map("visual_description")
  detectionKeywords  String[]  @map("detection_keywords")
  category           String?
  brand              String?
  unitPrice          Decimal?  @map("unit_price")
  imageUrl           String?   @map("image_url")
  createdAt          DateTime  @default(now()) @map("created_at")

  // Relations
  flightRequirements FlightRequirement[]
  detections         ProductDetection[]

  @@map("products")
}

// ---------- FLIGHTS ----------
model Flight {
  flightId     Int       @id @default(autoincrement())
  flightNumber String    @unique @map("flight_number")
  departureTime DateTime @map("departure_time")
  origin       String
  destination  String
  status       String    @default("scheduled")
  createdAt    DateTime  @default(now()) @map("created_at")

  // Relations
  trolleys           Trolley[]
  flightRequirements FlightRequirement[]

  @@map("flights")
}

// ---------- TROLLEYS ----------
model Trolley {
  trolleyId    Int       @id @default(autoincrement())
  trolleyCode  String    @unique @map("trolley_code")
  status       String    @default("empty")
  assignedAt   DateTime? @map("assigned_at")

  // Relations
  flightId           Int?
  flight             Flight?   @relation(fields: [flightId], references: [flightId])
  scans              Scan[]
  flightRequirements FlightRequirement[]

  @@map("trolleys")
}

// ---------- FLIGHT REQUIREMENTS ----------
model FlightRequirement {
  requirementId    Int      @id @default(autoincrement())
  expectedQuantity Int      @map("expected_quantity")
  priority         String   @default("normal")

  // Relations
  flightId   Int
  trolleyId  Int
  productId  Int

  flight     Flight   @relation(fields: [flightId], references: [flightId])
  trolley    Trolley  @relation(fields: [trolleyId], references: [trolleyId])
  product    Product  @relation(fields: [productId], references: [productId])

  @@unique([flightId, trolleyId, productId], name: "unique_requirement")
  @@map("flight_requirements")
}

// ---------- SCANS ----------
model Scan {
  scanId       Int       @id @default(autoincrement())
  videoPath    String?   @map("video_path")
  startedAt    DateTime  @default(now()) @map("started_at")
  endedAt      DateTime? @map("ended_at")
  status       String    @default("recording")
  metadata     Json?

  // Relations
  trolleyId    Int?
  operatorId   Int?

  trolley      Trolley?           @relation(fields: [trolleyId], references: [trolleyId])
  operator     User?              @relation(fields: [operatorId], references: [userId])
  detections   ProductDetection[]

  @@map("scans")
}

// ---------- PRODUCT DETECTIONS ----------
model ProductDetection {
  detectionId   Int      @id @default(autoincrement())
  detectedAt    DateTime @default(now()) @map("detected_at")
  confidence    Decimal? @db.Decimal(5, 4)
  videoFrameId  String?  @map("video_frame_id")

  // Relations
  scanId     Int
  productId  Int
  operatorId Int?

  scan       Scan     @relation(fields: [scanId], references: [scanId], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [productId])
  operator   User?    @relation(fields: [operatorId], references: [userId])

  @@unique([scanId, productId, detectedAt])
  @@index([scanId])
  @@index([productId])
  @@index([detectedAt(sort: Desc)])
  @@map("product_detections")
}